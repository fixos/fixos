This directory is used to place all definitions that are aimed to be used from
the user space.
This is not always the case on "real" UNIX-like kernels, which sometimes mix
kernel and shared kernel/user definitions in each public header and use
preprocessor to restrict user view (e.g. _KERNEL on Linux or NetBSD).

I assume the common way have interesting benefits (centralized headers, no need
to duplicate some directory trees...), but it seems a bit dirty for me.
So the rule here is : does a define, type or misc function should be known by
a user space application to understand a visible kernel interface? If the
answer is "yes", place a part of the header in this directory (at top-level
for now if it's not arch-specific or device-specific), and include the
corresponding <interface/path/header.h> in your usual kernel header.
In most case, try to have only one reference to this include file in the
rest of the kernel : using this way the other files don't have to known if
a given macro or type is shared with user space or not.

The design of FiXos user space headers may change in the future if some issues
are noticed, but until this (possible) moment, this directory is the good way!


Note : a new issue occured when trying to use interface headers when porting
an ISO C / POSIX library. Types and macros defined by FiXos headers are
conflicting with userspace definitions, and are not suitable for direct usage
(because the userspace library may need to only declare a subset of them
 in some places to be conform with a given standard).
On Linux/Glibc, the -partial- solution was to redefine almost every macro
and type with hardcoded values in Glibc...
After a long time thinking to the better solution, it seems to be a very
delicate problem to solve in C language (mainly because of macros and
struct/enum 'tag' names).
The final idea is to do "lazy renaming" : if a definition in interface header
is a problem for implementing the C/POSIX library, and no simple solution is
found in the library part, it is possible to rename (using a __kernel_ or
__KERNEL_ prefix) some items here.
For now, this renaming will not be generalized to avoid overcomplicated headers
and make kernel <-> user space interfaces easier to understand and use (even
without any library).



